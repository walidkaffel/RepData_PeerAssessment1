installed.packages("swirl")
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
list.files.help()
?list.files
args(list.files())
args(list.files
args(list.files)
args(list.files)
old.dir
old.dir <- getwd()
testdir <- dir.create()
testdir <- dir.create(getwd())
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest.R")
file.path("mytest3.R")
file.path
file.path("folder1", "folder2")
dir.create("folder1/folder2", recursive=TRUE)
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?':'
seq(1, 20)
seq(1, 10, by=0.5)
seq(1, 10, by=0.5)
seq(1, 10, by=0.5).
seq(1, 10, by=0.5)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
bye()
swirl(resume.class = 3)
num_vect <- c(0.5, 55, -10, 6)
tf <- numvect<1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse= " ")
my_name <- c(my_char, "walid")
my_name
paste(my_char, collapse= " ")
paste(my_name, collapse= " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep ="-")
1:20
pi:10
15:1
?':'
seq(1:20)
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(z, y), 100)
my_data <- sample(c(y, z), 100)
ny_na <- is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x[3], x[5], x[7])
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = Na)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, now = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- colnames
colnames(my_data) <- clnames
colnames(my_data) <- cnames
my_data
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0, 1), 100, prob = c(0.3, 0.7))
sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
rbinom(1, size = 100, prob = 0.7)
rbinom(1, size = 100, prob = 0.7)
rbinom(1, size = 100, prob = 0.7)
rbinom(100, size = 1, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
?plot
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub main = "My Plot")
plot(cars, submain = "My Plot")
?plot
plot(cars, sub = "My Plot")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col = 2)
plot(cars, col = 2, xlim = c(10, 15))
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot
boxplot(data = mtcars, formula = mpg ~cyl)
boxplot(mtcars, formula = mpg ~cyl)
boxplot(formula = mpg ~cyl, data = mtcars)
hist(mtcars$mpg)
install.packages("dplyr")
library(swirl)
library(dplyr)
swirl(resume.class = )
install_from_swirl("Getting and Cleaning Data")
swirl(resume.class = )
bye()
swrirl()
swirl()
bye()
swirl(resume.class = )
library(dplyr)
carn <- tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?groupby
?group_by
by_package <- group_by(cran, package)
bu_package
by_package
summarize(cran, mean(size))
summarize(by_package, mean(size))
by_package
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(count>679)
top_counts <- filter(count > 679.56)
top_counts <- filter(pack_sum, count > 679.56)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View
View()
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(count))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, 'key', 'value')
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
separate(data = res, col = sex_class, into = c("sex", "class"))
submit
submit()
bye
bye()
setwd("C:/Coursera/git_repo/course5p1")
